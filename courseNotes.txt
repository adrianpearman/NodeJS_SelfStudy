Module - A re-useable block of code whose existence doles not accidentally impact other code.

Common JS Modules - An agreed upon standard for how code modules should be structured

First Class Function - Everything you can do with other types (i.e. strings, numbers, etc) you can do with functions

An Expression - A block of code that results in a value

Invoke - Run the function (also referred to as call)


// var a = 1
// var b = 2
// var c = a+b
// console.log(c);



// function statement
function greeting(){
  console.log('hi')
}
greeting()

// functions are first-class
function logGreeting(fn){
  fn()
}
logGreeting(greeting)

// function expression
// e.g 'hello', 3
var greetMe = function(){
  console.log('Hello Adrian');
}
greetMe();

// it's first-class
logGreeting(greetMe)

// use a function on the fly
logGreeting(function(){
  console.log('Yo Adrian');
})


Name/Value pair - A name which maps to a value
Object - A collection of name value pairs
Object Literal - a name value pair seperated by commas and surrounded in curly braces
e.g
var person = {
  firstname: 'Adrian',
  lastname: 'Pearman',
  greet: function(){
    console.log('Hello, '+this.firstname + ' ' + this.lastname);
  }
}

// Invoking the object in two different ways. either dot notation or invoking inside the console.log
person.greet()
console.log(person['firstname']);

Inheritance - when one object gets access to the properties and methods of another method

function constructor - a normal function that is used to construct objects
function Person(firstname, lastname){
  this.firstname = firstname
  this.lastname = lastname
}

Person.prototype.greet = function(){
  console.log('hello, '+this.firstname);
}

var adrian = new Person('adrian', 'pearman')
adrian.greet()
// console.log(adrian.firstname);


var mackenzie = new Person('mackenzie', 'pearman')
mackenzie.greet()


console.log(adrian.__proto__);
console.log(mackenzie.__proto__);

// compares the two objects. it will return the two as true instead of false as both objects are same even though the they have different values
console.log(adrian.__proto__ === mackenzie.__proto__);


Primitive - a type of data that represents a single value
e.g//  pass by value
function change(b){
  b = 2
}

var a = 1
change(a)
console.log(a);


// pass by references
function changeObj(d){
  d.prop1 = function(){}
  d.prop2 = {}
}

var c = {}
c.prop1 = {}
changeObj(c)
console.log(c);

IIFE - Immediately Invoke Function Expression
(function (){
 // code goes here
}())

Scope - Where in code you have access to a variable or function
// Due to the scope chain, the iife will not have any effect on the firstname variable outside of the firstname function called in the iife
var firstname = 'Jane';

(function(){
  var firstname = 'Adrian'
  console.log(firstname);
}());

console.log(firstname);


Require - a function that you pass a path to
module.exports - is what the require function returns
this works because your code is actually wrapped in a function that is given there things as function parameters


json (javascript object notation)- a standard for structuring data that is inspired by javascript object literals
e.g  {
  "firstname": "John",
  "lastname": "Doe",
  "address":{
    "street": "122 Main St",
    "city": "New York",
    "state": "NY"
  }
}

Revealing Module Pattern - Exposing only the properties and methods you want via an returned object


Mutate - the ability to change data

exports vs module.exports - use module.exports instead of just the shorthand of exports.
If you set a property on exports, like exports.a = 9;, that will set module.exports.a as well because objects are passed around as references in JavaScript, which means that if you set multiple variables to the same object, they are all the same object; so then exports and module.exports are the same object.
But if you set exports to something new, it will no longer be set to module.exports, so exports and module.exports are no longer the same object.


Event - Something that has happened in out app that we can respond to.

Event listener - the code that responds to an events

Magic String - A string that has some special meaning in our code

Template Literal - A way to concatenate strings in Javascript(ES6s)

Syntactic Sugar - a feature that only changes how you type something, but nothing under the hood changes.

Asynchronous - more than one process running simultaneously

Synchronous - one process at a time

Node.JS is asynchronous, V8 and Javascript is synchronous

Callback - a function that we pass to another function, and we assume that it will be invoked at some point

Non Blocking - doing other things without stopping your program from running

Buffer - a temporary holding spot for data being moved from one place to another

Stream - a sequence of data made available over time (use streams where ever you can, and if not make sure that it is on purpose)

Binary Data - data that is stored in binary (0's and 1's). The computer reads the binary digits from right to left over base 2.

Character Set - a representation of characters as numbers

Character Encoding - how characters are stored in binary

Bit = 8 Bytes

Error-First Callback - Callback that takes an error object as its first parameter (null if no error, otherwise will contain an object)

Chunk - a piece data being sent through a stream

Abstract class - a type pf constructor that you never work directly with, but inherit from.

Pipe - Connecting two streams by writing to one stream what is being read from another

Method Chaining - a method returns an object so we can keep calling methods

Protocol - a set of rules two sides agree on when communicating

TCP - Transmission Control Protocol

IP - Internet Protocol

Port - Once a computer receives a packet, how it knows what program to send it to.

HTTP (HyperText Transfer Protocol) - a set of rules (and a format) for data being transferred on the web

MIME Type (Multipurpose Internet Mail Extensions) - a standard for specifying the type of data being sent

Template - text designed to be the basis for final text or content after being processed

API (Application Programming Interface)- a set of tools for building a software application

Endpoint - one url in a web api

Serialized - translating an object into a format that can be store or transferred (Deserialized is the opposite; converting back into an object. Common formats for this is JSON, XMLand CSV)

Routing - mapping http request to content

Package - code thats managed and maintained with a package management system

Package Management System - software that automates installing and updating packages

Dependency - code that another set of code depends on to function

Versoning - specifying what version of a set of that it is. (Semantic versoning dictates what version it is. for example Code 1.8.0. The numbers are described as major.minor.patch. patch is for small bugs; minor is usually new features but is backwards compatible. major is for big changes. previous code may break) checkout semver.org

installing npm files within the application use 'npm install #npmmodule --save'

to save as a devDependancy so that it isn't sent into production us 'npm install #npmmodule --save-dev'

to save an npm module globally, use 'npm install -g #npmmodule'

to update the dependancies within a npm module use 'npm update'

environment variables - global variables specific to the environment(server) our code is living in 
